datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?         @default("https://cdn.dribbble.com/users/2406416/screenshots/6881486/lego5_4x.jpg?resize=1000x750&vertical=center")
  userNick      String          @unique @default(cuid())
  avatarUrl     String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  collection UserCollection[]
  wishes     UserWishes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Set {
  id          Int    @id @default(autoincrement())
  set_num     String
  name        String
  year        Int
  theme_id    Int
  num_parts   Int
  set_img_url String
  set_url     String

  collection   UserCollection? @relation(fields: [collectionId], references: [id])
  collectionId Int?

  wishes   UserWishes? @relation(fields: [wishesId], references: [id])
  wishesId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCollection {
  id Int @id @default(autoincrement())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  sets Set[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserWishes {
  id Int @id @default(autoincrement())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  sets Set[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
